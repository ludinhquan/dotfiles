#!/bin/bash

# Constants
VPN_CONFIG_PATH="$HOME/.nordvpn/ovpn_udp"
CREDENTIAL_PATH="$HOME/.nordvpn/credential.txt"
LOG_FILE="/tmp/nordvpn.log"
IP_ROUTES=(
  103.151.121.198 # kscdnoversea-th.inter.71edge.com
  118.69.17.193 # ads.tiktok.com
  118.69.17.201 # ads.tiktok.com
  183.80.211.203 # ads.tiktok.com
  118.69.17.204 # ads.tiktok.com
  118.69.17.187 # ads.tiktok.com
  183.80.211.218 # ads.tiktok.com
  118.69.17.15 # ads.tiktok.com
  183.80.211.200 # ads.tiktok.com
  118.69.17.186 # ads.tiktok.com
)

IP_DEFAULTS=(
  34.117.186.192 # ipinfo.io
  172.67.168.106 # ifconfig.co
  104.21.54.91 # ifconfig.co
)

# Function to clean up and exit
cleanup_and_exit() {
    echo -e "\nExiting..."
    if pgrep openvpn > /dev/null; then
        if sudo pkill openvpn; then
            echo "All OpenVPN processes killed."
        else
            echo "Failed to kill OpenVPN processes."
        fi
    fi
    exit 1
}

# Trap Ctrl+C and call cleanup_and_exit function
trap cleanup_and_exit SIGINT

# Function to select VPN configuration file
select_vpn_config() {
    local selected_filename
    selected_filename=$(rg --files "$VPN_CONFIG_PATH" | xargs -n1 basename | fzf --prompt="Select VPN config: ")

    if [ -z "$selected_filename" ]; then
        echo ""
    else
        echo "$VPN_CONFIG_PATH/$selected_filename"
    fi
}

# Function to update auth-user-pass in the configuration file
update_auth_user_pass() {
    local file=$1
    local line_number
    line_number=$(grep -n 'auth-user-pass.*' "$file" | cut -d':' -f1)

    if [ -n "$line_number" ] && [ "$line_number" -gt 1 ]; then
        sed -i "${line_number}s|.*|auth-user-pass $CREDENTIAL_PATH|" "$file"
    else
        echo "auth-user-pass $CREDENTIAL_PATH" >> "$file"
    fi
    echo "'auth-user-pass' updated in $file"
}

# Function to update route and route-nopull in the configuration file
update_routes() {
    local file=$1

    # Remove existing route and route-nopull lines
    sed -i '/^route /d' "$file"
    sed -i '/^route-nopull/d' "$file"

    local routes=()
    if [ ${#IP_ROUTES[@]} -ne 0 ]; then
        routes=("${IP_ROUTES[@]}" "${IP_DEFAULTS[@]}")
    fi

    # Add new route lines based on IP_ROUTES array
    if [ ${#routes[@]} -ne 0 ]; then
        for ip in "${routes[@]}"; do
            echo "route $ip 255.255.255.255" >> "$file"
        done
        echo "route-nopull" >> "$file"
        echo "'route' and 'route-nopull' directives updated in $file"
    else
        echo "No routes to add. 'route-nopull' directive not added."
    fi
}

# Function to start OpenVPN connection
start_openvpn() {
    local config_file=$1
    sudo openvpn --config "$config_file" &> "$LOG_FILE" &
    echo "Waiting for the connection to establish..."

    while :; do
        if grep -q "Initialization Sequence Completed" "$LOG_FILE"; then
            echo "OpenVPN connection established."
            return 0
        elif grep -q "AUTH_FAILED" "$LOG_FILE"; then
            echo "Authentication failed. Exiting..."
            cleanup_and_exit
        fi
        sleep 1
    done
}

# Main script execution
selected_file=$(select_vpn_config)

if [ -z "$selected_file" ]; then
    echo "No file selected. Exiting..."
    exit 1
fi
echo "Selected VPN config: $selected_file"

update_auth_user_pass "$selected_file"
update_routes "$selected_file"

if start_openvpn "$selected_file"; then
    echo "Checking external IP..."
    curl ipinfo.io
    echo ""
else
    echo "Failed to establish OpenVPN connection using $selected_file."
    exit 1
fi

read -rp "Press Enter to stop the OpenVPN connection..."

# Clean up OpenVPN processes
cleanup_and_exit
